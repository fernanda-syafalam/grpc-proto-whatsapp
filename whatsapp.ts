// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: proto/whatsapp.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "whatsapp";

export interface DeviceID {
  deviceID: string;
}

export interface SendMessageDto {
  deviceID: string;
  to: string;
  message: string;
  disappearingDay?: number | undefined;
}

export interface SendMediaDto {
  deviceID: string;
  to: string;
  urlMedia: string;
  mediaName: string;
  ptt: boolean;
  mediaType: string;
  disappearingDay?: number | undefined;
}

export interface SuccessResponse {
  success: boolean;
  message: string;
}

export const WHATSAPP_PACKAGE_NAME = "whatsapp";

export interface WhatsAppServiceClient {
  sendMedia(request: SendMediaDto): Observable<SuccessResponse>;

  sendMessage(request: SendMessageDto): Observable<SuccessResponse>;

  generateQr(request: DeviceID): Observable<SuccessResponse>;
}

export interface WhatsAppServiceController {
  sendMedia(request: SendMediaDto): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  sendMessage(request: SendMessageDto): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  generateQr(request: DeviceID): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function WhatsAppServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendMedia", "sendMessage", "generateQr"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WhatsAppService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WhatsAppService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WHATS_APP_SERVICE_NAME = "WhatsAppService";
